// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification/ent/extensionclient"
	"notification/ent/tabhistory"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// TabHistory is the model entity for the TabHistory schema.
type TabHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon string `json:"icon,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TabHistoryQuery when eager-loading is set.
	Edges                      TabHistoryEdges `json:"edges"`
	extension_client_histories *int
}

// TabHistoryEdges holds the relations/edges for other nodes in the graph.
type TabHistoryEdges struct {
	// HistoryList holds the value of the history_list edge.
	HistoryList *ExtensionClient `json:"history_list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HistoryListOrErr returns the HistoryList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TabHistoryEdges) HistoryListOrErr() (*ExtensionClient, error) {
	if e.loadedTypes[0] {
		if e.HistoryList == nil {
			// The edge history_list was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: extensionclient.Label}
		}
		return e.HistoryList, nil
	}
	return nil, &NotLoadedError{edge: "history_list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TabHistory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tabhistory.FieldID:
			values[i] = new(sql.NullInt64)
		case tabhistory.FieldURL, tabhistory.FieldName, tabhistory.FieldIcon:
			values[i] = new(sql.NullString)
		case tabhistory.ForeignKeys[0]: // extension_client_histories
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TabHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TabHistory fields.
func (th *TabHistory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tabhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			th.ID = int(value.Int64)
		case tabhistory.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				th.URL = value.String
			}
		case tabhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				th.Name = value.String
			}
		case tabhistory.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				th.Icon = value.String
			}
		case tabhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field extension_client_histories", value)
			} else if value.Valid {
				th.extension_client_histories = new(int)
				*th.extension_client_histories = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryHistoryList queries the "history_list" edge of the TabHistory entity.
func (th *TabHistory) QueryHistoryList() *ExtensionClientQuery {
	return (&TabHistoryClient{config: th.config}).QueryHistoryList(th)
}

// Update returns a builder for updating this TabHistory.
// Note that you need to call TabHistory.Unwrap() before calling this method if this TabHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TabHistory) Update() *TabHistoryUpdateOne {
	return (&TabHistoryClient{config: th.config}).UpdateOne(th)
}

// Unwrap unwraps the TabHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TabHistory) Unwrap() *TabHistory {
	tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TabHistory is not a transactional entity")
	}
	th.config.driver = tx.drv
	return th
}

// String implements the fmt.Stringer.
func (th *TabHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TabHistory(")
	builder.WriteString(fmt.Sprintf("id=%v", th.ID))
	builder.WriteString(", url=")
	builder.WriteString(th.URL)
	builder.WriteString(", name=")
	builder.WriteString(th.Name)
	builder.WriteString(", icon=")
	builder.WriteString(th.Icon)
	builder.WriteByte(')')
	return builder.String()
}

// TabHistories is a parsable slice of TabHistory.
type TabHistories []*TabHistory

func (th TabHistories) config(cfg config) {
	for _i := range th {
		th[_i].config = cfg
	}
}
