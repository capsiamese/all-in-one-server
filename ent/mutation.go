// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification/ent/extensionclient"
	"notification/ent/group"
	"notification/ent/predicate"
	"notification/ent/tab"
	"notification/internal/pb"
	"sync"
	"time"

	"entgo.io/ent"
	uuid "github.com/satori/go.uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeExtensionClient = "ExtensionClient"
	TypeGroup           = "Group"
	TypeTab             = "Tab"
)

// ExtensionClientMutation represents an operation that mutates the ExtensionClient nodes in the graph.
type ExtensionClientMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	extension_id     *string
	client_uid       *uuid.UUID
	last_access_time *time.Time
	clearedFields    map[string]struct{}
	groups           map[int]struct{}
	removedgroups    map[int]struct{}
	clearedgroups    bool
	done             bool
	oldValue         func(context.Context) (*ExtensionClient, error)
	predicates       []predicate.ExtensionClient
}

var _ ent.Mutation = (*ExtensionClientMutation)(nil)

// extensionclientOption allows management of the mutation configuration using functional options.
type extensionclientOption func(*ExtensionClientMutation)

// newExtensionClientMutation creates new mutation for the ExtensionClient entity.
func newExtensionClientMutation(c config, op Op, opts ...extensionclientOption) *ExtensionClientMutation {
	m := &ExtensionClientMutation{
		config:        c,
		op:            op,
		typ:           TypeExtensionClient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExtensionClientID sets the ID field of the mutation.
func withExtensionClientID(id int) extensionclientOption {
	return func(m *ExtensionClientMutation) {
		var (
			err   error
			once  sync.Once
			value *ExtensionClient
		)
		m.oldValue = func(ctx context.Context) (*ExtensionClient, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExtensionClient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExtensionClient sets the old ExtensionClient of the mutation.
func withExtensionClient(node *ExtensionClient) extensionclientOption {
	return func(m *ExtensionClientMutation) {
		m.oldValue = func(context.Context) (*ExtensionClient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExtensionClientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExtensionClientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExtensionClientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExtensionClientMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExtensionClient.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExtensionClientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExtensionClientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ExtensionClient entity.
// If the ExtensionClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtensionClientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExtensionClientMutation) ResetName() {
	m.name = nil
}

// SetExtensionID sets the "extension_id" field.
func (m *ExtensionClientMutation) SetExtensionID(s string) {
	m.extension_id = &s
}

// ExtensionID returns the value of the "extension_id" field in the mutation.
func (m *ExtensionClientMutation) ExtensionID() (r string, exists bool) {
	v := m.extension_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExtensionID returns the old "extension_id" field's value of the ExtensionClient entity.
// If the ExtensionClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtensionClientMutation) OldExtensionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtensionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtensionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtensionID: %w", err)
	}
	return oldValue.ExtensionID, nil
}

// ResetExtensionID resets all changes to the "extension_id" field.
func (m *ExtensionClientMutation) ResetExtensionID() {
	m.extension_id = nil
}

// SetClientUID sets the "client_uid" field.
func (m *ExtensionClientMutation) SetClientUID(u uuid.UUID) {
	m.client_uid = &u
}

// ClientUID returns the value of the "client_uid" field in the mutation.
func (m *ExtensionClientMutation) ClientUID() (r uuid.UUID, exists bool) {
	v := m.client_uid
	if v == nil {
		return
	}
	return *v, true
}

// OldClientUID returns the old "client_uid" field's value of the ExtensionClient entity.
// If the ExtensionClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtensionClientMutation) OldClientUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientUID: %w", err)
	}
	return oldValue.ClientUID, nil
}

// ResetClientUID resets all changes to the "client_uid" field.
func (m *ExtensionClientMutation) ResetClientUID() {
	m.client_uid = nil
}

// SetLastAccessTime sets the "last_access_time" field.
func (m *ExtensionClientMutation) SetLastAccessTime(t time.Time) {
	m.last_access_time = &t
}

// LastAccessTime returns the value of the "last_access_time" field in the mutation.
func (m *ExtensionClientMutation) LastAccessTime() (r time.Time, exists bool) {
	v := m.last_access_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastAccessTime returns the old "last_access_time" field's value of the ExtensionClient entity.
// If the ExtensionClient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtensionClientMutation) OldLastAccessTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastAccessTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastAccessTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastAccessTime: %w", err)
	}
	return oldValue.LastAccessTime, nil
}

// ResetLastAccessTime resets all changes to the "last_access_time" field.
func (m *ExtensionClientMutation) ResetLastAccessTime() {
	m.last_access_time = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *ExtensionClientMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *ExtensionClientMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *ExtensionClientMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *ExtensionClientMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *ExtensionClientMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *ExtensionClientMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *ExtensionClientMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// Where appends a list predicates to the ExtensionClientMutation builder.
func (m *ExtensionClientMutation) Where(ps ...predicate.ExtensionClient) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExtensionClientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ExtensionClient).
func (m *ExtensionClientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExtensionClientMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, extensionclient.FieldName)
	}
	if m.extension_id != nil {
		fields = append(fields, extensionclient.FieldExtensionID)
	}
	if m.client_uid != nil {
		fields = append(fields, extensionclient.FieldClientUID)
	}
	if m.last_access_time != nil {
		fields = append(fields, extensionclient.FieldLastAccessTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExtensionClientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case extensionclient.FieldName:
		return m.Name()
	case extensionclient.FieldExtensionID:
		return m.ExtensionID()
	case extensionclient.FieldClientUID:
		return m.ClientUID()
	case extensionclient.FieldLastAccessTime:
		return m.LastAccessTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExtensionClientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case extensionclient.FieldName:
		return m.OldName(ctx)
	case extensionclient.FieldExtensionID:
		return m.OldExtensionID(ctx)
	case extensionclient.FieldClientUID:
		return m.OldClientUID(ctx)
	case extensionclient.FieldLastAccessTime:
		return m.OldLastAccessTime(ctx)
	}
	return nil, fmt.Errorf("unknown ExtensionClient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExtensionClientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case extensionclient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case extensionclient.FieldExtensionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtensionID(v)
		return nil
	case extensionclient.FieldClientUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientUID(v)
		return nil
	case extensionclient.FieldLastAccessTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastAccessTime(v)
		return nil
	}
	return fmt.Errorf("unknown ExtensionClient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExtensionClientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExtensionClientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExtensionClientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExtensionClient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExtensionClientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExtensionClientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExtensionClientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExtensionClient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExtensionClientMutation) ResetField(name string) error {
	switch name {
	case extensionclient.FieldName:
		m.ResetName()
		return nil
	case extensionclient.FieldExtensionID:
		m.ResetExtensionID()
		return nil
	case extensionclient.FieldClientUID:
		m.ResetClientUID()
		return nil
	case extensionclient.FieldLastAccessTime:
		m.ResetLastAccessTime()
		return nil
	}
	return fmt.Errorf("unknown ExtensionClient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExtensionClientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.groups != nil {
		edges = append(edges, extensionclient.EdgeGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExtensionClientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case extensionclient.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExtensionClientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgroups != nil {
		edges = append(edges, extensionclient.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExtensionClientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case extensionclient.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExtensionClientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroups {
		edges = append(edges, extensionclient.EdgeGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExtensionClientMutation) EdgeCleared(name string) bool {
	switch name {
	case extensionclient.EdgeGroups:
		return m.clearedgroups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExtensionClientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ExtensionClient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExtensionClientMutation) ResetEdge(name string) error {
	switch name {
	case extensionclient.EdgeGroups:
		m.ResetGroups()
		return nil
	}
	return fmt.Errorf("unknown ExtensionClient edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op            Op
	typ           string
	id            *int
	uid           *uuid.UUID
	name          *string
	created_at    *time.Time
	share_url     *string
	option        *pb.GroupOption
	clearedFields map[string]struct{}
	tabs          map[int]struct{}
	removedtabs   map[int]struct{}
	clearedtabs   bool
	client        *int
	clearedclient bool
	done          bool
	oldValue      func(context.Context) (*Group, error)
	predicates    []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *GroupMutation) SetUID(u uuid.UUID) {
	m.uid = &u
}

// UID returns the value of the "uid" field in the mutation.
func (m *GroupMutation) UID() (r uuid.UUID, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *GroupMutation) ResetUID() {
	m.uid = nil
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetShareURL sets the "share_url" field.
func (m *GroupMutation) SetShareURL(s string) {
	m.share_url = &s
}

// ShareURL returns the value of the "share_url" field in the mutation.
func (m *GroupMutation) ShareURL() (r string, exists bool) {
	v := m.share_url
	if v == nil {
		return
	}
	return *v, true
}

// OldShareURL returns the old "share_url" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldShareURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShareURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShareURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShareURL: %w", err)
	}
	return oldValue.ShareURL, nil
}

// ClearShareURL clears the value of the "share_url" field.
func (m *GroupMutation) ClearShareURL() {
	m.share_url = nil
	m.clearedFields[group.FieldShareURL] = struct{}{}
}

// ShareURLCleared returns if the "share_url" field was cleared in this mutation.
func (m *GroupMutation) ShareURLCleared() bool {
	_, ok := m.clearedFields[group.FieldShareURL]
	return ok
}

// ResetShareURL resets all changes to the "share_url" field.
func (m *GroupMutation) ResetShareURL() {
	m.share_url = nil
	delete(m.clearedFields, group.FieldShareURL)
}

// SetOption sets the "option" field.
func (m *GroupMutation) SetOption(po pb.GroupOption) {
	m.option = &po
}

// Option returns the value of the "option" field in the mutation.
func (m *GroupMutation) Option() (r pb.GroupOption, exists bool) {
	v := m.option
	if v == nil {
		return
	}
	return *v, true
}

// OldOption returns the old "option" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldOption(ctx context.Context) (v pb.GroupOption, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOption: %w", err)
	}
	return oldValue.Option, nil
}

// ClearOption clears the value of the "option" field.
func (m *GroupMutation) ClearOption() {
	m.option = nil
	m.clearedFields[group.FieldOption] = struct{}{}
}

// OptionCleared returns if the "option" field was cleared in this mutation.
func (m *GroupMutation) OptionCleared() bool {
	_, ok := m.clearedFields[group.FieldOption]
	return ok
}

// ResetOption resets all changes to the "option" field.
func (m *GroupMutation) ResetOption() {
	m.option = nil
	delete(m.clearedFields, group.FieldOption)
}

// AddTabIDs adds the "tabs" edge to the Tab entity by ids.
func (m *GroupMutation) AddTabIDs(ids ...int) {
	if m.tabs == nil {
		m.tabs = make(map[int]struct{})
	}
	for i := range ids {
		m.tabs[ids[i]] = struct{}{}
	}
}

// ClearTabs clears the "tabs" edge to the Tab entity.
func (m *GroupMutation) ClearTabs() {
	m.clearedtabs = true
}

// TabsCleared reports if the "tabs" edge to the Tab entity was cleared.
func (m *GroupMutation) TabsCleared() bool {
	return m.clearedtabs
}

// RemoveTabIDs removes the "tabs" edge to the Tab entity by IDs.
func (m *GroupMutation) RemoveTabIDs(ids ...int) {
	if m.removedtabs == nil {
		m.removedtabs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tabs, ids[i])
		m.removedtabs[ids[i]] = struct{}{}
	}
}

// RemovedTabs returns the removed IDs of the "tabs" edge to the Tab entity.
func (m *GroupMutation) RemovedTabsIDs() (ids []int) {
	for id := range m.removedtabs {
		ids = append(ids, id)
	}
	return
}

// TabsIDs returns the "tabs" edge IDs in the mutation.
func (m *GroupMutation) TabsIDs() (ids []int) {
	for id := range m.tabs {
		ids = append(ids, id)
	}
	return
}

// ResetTabs resets all changes to the "tabs" edge.
func (m *GroupMutation) ResetTabs() {
	m.tabs = nil
	m.clearedtabs = false
	m.removedtabs = nil
}

// SetClientID sets the "client" edge to the ExtensionClient entity by id.
func (m *GroupMutation) SetClientID(id int) {
	m.client = &id
}

// ClearClient clears the "client" edge to the ExtensionClient entity.
func (m *GroupMutation) ClearClient() {
	m.clearedclient = true
}

// ClientCleared reports if the "client" edge to the ExtensionClient entity was cleared.
func (m *GroupMutation) ClientCleared() bool {
	return m.clearedclient
}

// ClientID returns the "client" edge ID in the mutation.
func (m *GroupMutation) ClientID() (id int, exists bool) {
	if m.client != nil {
		return *m.client, true
	}
	return
}

// ClientIDs returns the "client" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) ClientIDs() (ids []int) {
	if id := m.client; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClient resets all changes to the "client" edge.
func (m *GroupMutation) ResetClient() {
	m.client = nil
	m.clearedclient = false
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.uid != nil {
		fields = append(fields, group.FieldUID)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.share_url != nil {
		fields = append(fields, group.FieldShareURL)
	}
	if m.option != nil {
		fields = append(fields, group.FieldOption)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldUID:
		return m.UID()
	case group.FieldName:
		return m.Name()
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldShareURL:
		return m.ShareURL()
	case group.FieldOption:
		return m.Option()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldUID:
		return m.OldUID(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldShareURL:
		return m.OldShareURL(ctx)
	case group.FieldOption:
		return m.OldOption(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldShareURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShareURL(v)
		return nil
	case group.FieldOption:
		v, ok := value.(pb.GroupOption)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOption(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldShareURL) {
		fields = append(fields, group.FieldShareURL)
	}
	if m.FieldCleared(group.FieldOption) {
		fields = append(fields, group.FieldOption)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldShareURL:
		m.ClearShareURL()
		return nil
	case group.FieldOption:
		m.ClearOption()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldUID:
		m.ResetUID()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldShareURL:
		m.ResetShareURL()
		return nil
	case group.FieldOption:
		m.ResetOption()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tabs != nil {
		edges = append(edges, group.EdgeTabs)
	}
	if m.client != nil {
		edges = append(edges, group.EdgeClient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeTabs:
		ids := make([]ent.Value, 0, len(m.tabs))
		for id := range m.tabs {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeClient:
		if id := m.client; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtabs != nil {
		edges = append(edges, group.EdgeTabs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeTabs:
		ids := make([]ent.Value, 0, len(m.removedtabs))
		for id := range m.removedtabs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtabs {
		edges = append(edges, group.EdgeTabs)
	}
	if m.clearedclient {
		edges = append(edges, group.EdgeClient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeTabs:
		return m.clearedtabs
	case group.EdgeClient:
		return m.clearedclient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeClient:
		m.ClearClient()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeTabs:
		m.ResetTabs()
		return nil
	case group.EdgeClient:
		m.ResetClient()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// TabMutation represents an operation that mutates the Tab nodes in the graph.
type TabMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	url           *string
	seq           *int32
	addseq        *int32
	favicon       *string
	uid           *uuid.UUID
	clearedFields map[string]struct{}
	group         *int
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*Tab, error)
	predicates    []predicate.Tab
}

var _ ent.Mutation = (*TabMutation)(nil)

// tabOption allows management of the mutation configuration using functional options.
type tabOption func(*TabMutation)

// newTabMutation creates new mutation for the Tab entity.
func newTabMutation(c config, op Op, opts ...tabOption) *TabMutation {
	m := &TabMutation{
		config:        c,
		op:            op,
		typ:           TypeTab,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTabID sets the ID field of the mutation.
func withTabID(id int) tabOption {
	return func(m *TabMutation) {
		var (
			err   error
			once  sync.Once
			value *Tab
		)
		m.oldValue = func(ctx context.Context) (*Tab, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tab.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTab sets the old Tab of the mutation.
func withTab(node *Tab) tabOption {
	return func(m *TabMutation) {
		m.oldValue = func(context.Context) (*Tab, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TabMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TabMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TabMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TabMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tab.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TabMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TabMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tab entity.
// If the Tab object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TabMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TabMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *TabMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *TabMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Tab entity.
// If the Tab object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TabMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *TabMutation) ResetURL() {
	m.url = nil
}

// SetSeq sets the "seq" field.
func (m *TabMutation) SetSeq(i int32) {
	m.seq = &i
	m.addseq = nil
}

// Seq returns the value of the "seq" field in the mutation.
func (m *TabMutation) Seq() (r int32, exists bool) {
	v := m.seq
	if v == nil {
		return
	}
	return *v, true
}

// OldSeq returns the old "seq" field's value of the Tab entity.
// If the Tab object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TabMutation) OldSeq(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeq: %w", err)
	}
	return oldValue.Seq, nil
}

// AddSeq adds i to the "seq" field.
func (m *TabMutation) AddSeq(i int32) {
	if m.addseq != nil {
		*m.addseq += i
	} else {
		m.addseq = &i
	}
}

// AddedSeq returns the value that was added to the "seq" field in this mutation.
func (m *TabMutation) AddedSeq() (r int32, exists bool) {
	v := m.addseq
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeq resets all changes to the "seq" field.
func (m *TabMutation) ResetSeq() {
	m.seq = nil
	m.addseq = nil
}

// SetFavicon sets the "favicon" field.
func (m *TabMutation) SetFavicon(s string) {
	m.favicon = &s
}

// Favicon returns the value of the "favicon" field in the mutation.
func (m *TabMutation) Favicon() (r string, exists bool) {
	v := m.favicon
	if v == nil {
		return
	}
	return *v, true
}

// OldFavicon returns the old "favicon" field's value of the Tab entity.
// If the Tab object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TabMutation) OldFavicon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFavicon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFavicon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFavicon: %w", err)
	}
	return oldValue.Favicon, nil
}

// ClearFavicon clears the value of the "favicon" field.
func (m *TabMutation) ClearFavicon() {
	m.favicon = nil
	m.clearedFields[tab.FieldFavicon] = struct{}{}
}

// FaviconCleared returns if the "favicon" field was cleared in this mutation.
func (m *TabMutation) FaviconCleared() bool {
	_, ok := m.clearedFields[tab.FieldFavicon]
	return ok
}

// ResetFavicon resets all changes to the "favicon" field.
func (m *TabMutation) ResetFavicon() {
	m.favicon = nil
	delete(m.clearedFields, tab.FieldFavicon)
}

// SetUID sets the "uid" field.
func (m *TabMutation) SetUID(u uuid.UUID) {
	m.uid = &u
}

// UID returns the value of the "uid" field in the mutation.
func (m *TabMutation) UID() (r uuid.UUID, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Tab entity.
// If the Tab object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TabMutation) OldUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *TabMutation) ResetUID() {
	m.uid = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *TabMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *TabMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *TabMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *TabMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *TabMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *TabMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the TabMutation builder.
func (m *TabMutation) Where(ps ...predicate.Tab) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TabMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tab).
func (m *TabMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TabMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, tab.FieldName)
	}
	if m.url != nil {
		fields = append(fields, tab.FieldURL)
	}
	if m.seq != nil {
		fields = append(fields, tab.FieldSeq)
	}
	if m.favicon != nil {
		fields = append(fields, tab.FieldFavicon)
	}
	if m.uid != nil {
		fields = append(fields, tab.FieldUID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TabMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tab.FieldName:
		return m.Name()
	case tab.FieldURL:
		return m.URL()
	case tab.FieldSeq:
		return m.Seq()
	case tab.FieldFavicon:
		return m.Favicon()
	case tab.FieldUID:
		return m.UID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TabMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tab.FieldName:
		return m.OldName(ctx)
	case tab.FieldURL:
		return m.OldURL(ctx)
	case tab.FieldSeq:
		return m.OldSeq(ctx)
	case tab.FieldFavicon:
		return m.OldFavicon(ctx)
	case tab.FieldUID:
		return m.OldUID(ctx)
	}
	return nil, fmt.Errorf("unknown Tab field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TabMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tab.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case tab.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case tab.FieldSeq:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeq(v)
		return nil
	case tab.FieldFavicon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFavicon(v)
		return nil
	case tab.FieldUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	}
	return fmt.Errorf("unknown Tab field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TabMutation) AddedFields() []string {
	var fields []string
	if m.addseq != nil {
		fields = append(fields, tab.FieldSeq)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TabMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tab.FieldSeq:
		return m.AddedSeq()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TabMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tab.FieldSeq:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeq(v)
		return nil
	}
	return fmt.Errorf("unknown Tab numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TabMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(tab.FieldFavicon) {
		fields = append(fields, tab.FieldFavicon)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TabMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TabMutation) ClearField(name string) error {
	switch name {
	case tab.FieldFavicon:
		m.ClearFavicon()
		return nil
	}
	return fmt.Errorf("unknown Tab nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TabMutation) ResetField(name string) error {
	switch name {
	case tab.FieldName:
		m.ResetName()
		return nil
	case tab.FieldURL:
		m.ResetURL()
		return nil
	case tab.FieldSeq:
		m.ResetSeq()
		return nil
	case tab.FieldFavicon:
		m.ResetFavicon()
		return nil
	case tab.FieldUID:
		m.ResetUID()
		return nil
	}
	return fmt.Errorf("unknown Tab field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TabMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, tab.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TabMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tab.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TabMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TabMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TabMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, tab.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TabMutation) EdgeCleared(name string) bool {
	switch name {
	case tab.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TabMutation) ClearEdge(name string) error {
	switch name {
	case tab.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Tab unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TabMutation) ResetEdge(name string) error {
	switch name {
	case tab.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Tab edge %s", name)
}
