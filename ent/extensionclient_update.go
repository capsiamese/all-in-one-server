// Code generated by entc, DO NOT EDIT.

package ent

import (
	"aio/ent/extensionclient"
	"aio/ent/group"
	"aio/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	uuid "github.com/satori/go.uuid"
)

// ExtensionClientUpdate is the builder for updating ExtensionClient entities.
type ExtensionClientUpdate struct {
	config
	hooks    []Hook
	mutation *ExtensionClientMutation
}

// Where appends a list predicates to the ExtensionClientUpdate builder.
func (ecu *ExtensionClientUpdate) Where(ps ...predicate.ExtensionClient) *ExtensionClientUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetName sets the "name" field.
func (ecu *ExtensionClientUpdate) SetName(s string) *ExtensionClientUpdate {
	ecu.mutation.SetName(s)
	return ecu
}

// SetExtensionID sets the "extension_id" field.
func (ecu *ExtensionClientUpdate) SetExtensionID(s string) *ExtensionClientUpdate {
	ecu.mutation.SetExtensionID(s)
	return ecu
}

// SetClientUID sets the "client_uid" field.
func (ecu *ExtensionClientUpdate) SetClientUID(u uuid.UUID) *ExtensionClientUpdate {
	ecu.mutation.SetClientUID(u)
	return ecu
}

// SetLastAccessTime sets the "last_access_time" field.
func (ecu *ExtensionClientUpdate) SetLastAccessTime(t time.Time) *ExtensionClientUpdate {
	ecu.mutation.SetLastAccessTime(t)
	return ecu
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ecu *ExtensionClientUpdate) AddGroupIDs(ids ...int) *ExtensionClientUpdate {
	ecu.mutation.AddGroupIDs(ids...)
	return ecu
}

// AddGroups adds the "groups" edges to the Group entity.
func (ecu *ExtensionClientUpdate) AddGroups(g ...*Group) *ExtensionClientUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ecu.AddGroupIDs(ids...)
}

// Mutation returns the ExtensionClientMutation object of the builder.
func (ecu *ExtensionClientUpdate) Mutation() *ExtensionClientMutation {
	return ecu.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ecu *ExtensionClientUpdate) ClearGroups() *ExtensionClientUpdate {
	ecu.mutation.ClearGroups()
	return ecu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ecu *ExtensionClientUpdate) RemoveGroupIDs(ids ...int) *ExtensionClientUpdate {
	ecu.mutation.RemoveGroupIDs(ids...)
	return ecu
}

// RemoveGroups removes "groups" edges to Group entities.
func (ecu *ExtensionClientUpdate) RemoveGroups(g ...*Group) *ExtensionClientUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ecu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *ExtensionClientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ecu.hooks) == 0 {
		if err = ecu.check(); err != nil {
			return 0, err
		}
		affected, err = ecu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExtensionClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecu.check(); err != nil {
				return 0, err
			}
			ecu.mutation = mutation
			affected, err = ecu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ecu.hooks) - 1; i >= 0; i-- {
			if ecu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ecu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *ExtensionClientUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *ExtensionClientUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *ExtensionClientUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecu *ExtensionClientUpdate) check() error {
	if v, ok := ecu.mutation.Name(); ok {
		if err := extensionclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExtensionClient.name": %w`, err)}
		}
	}
	if v, ok := ecu.mutation.ExtensionID(); ok {
		if err := extensionclient.ExtensionIDValidator(v); err != nil {
			return &ValidationError{Name: "extension_id", err: fmt.Errorf(`ent: validator failed for field "ExtensionClient.extension_id": %w`, err)}
		}
	}
	return nil
}

func (ecu *ExtensionClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   extensionclient.Table,
			Columns: extensionclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: extensionclient.FieldID,
			},
		},
	}
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: extensionclient.FieldName,
		})
	}
	if value, ok := ecu.mutation.ExtensionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: extensionclient.FieldExtensionID,
		})
	}
	if value, ok := ecu.mutation.ClientUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: extensionclient.FieldClientUID,
		})
	}
	if value, ok := ecu.mutation.LastAccessTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: extensionclient.FieldLastAccessTime,
		})
	}
	if ecu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extensionclient.GroupsTable,
			Columns: []string{extensionclient.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ecu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extensionclient.GroupsTable,
			Columns: []string{extensionclient.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extensionclient.GroupsTable,
			Columns: []string{extensionclient.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ExtensionClientUpdateOne is the builder for updating a single ExtensionClient entity.
type ExtensionClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExtensionClientMutation
}

// SetName sets the "name" field.
func (ecuo *ExtensionClientUpdateOne) SetName(s string) *ExtensionClientUpdateOne {
	ecuo.mutation.SetName(s)
	return ecuo
}

// SetExtensionID sets the "extension_id" field.
func (ecuo *ExtensionClientUpdateOne) SetExtensionID(s string) *ExtensionClientUpdateOne {
	ecuo.mutation.SetExtensionID(s)
	return ecuo
}

// SetClientUID sets the "client_uid" field.
func (ecuo *ExtensionClientUpdateOne) SetClientUID(u uuid.UUID) *ExtensionClientUpdateOne {
	ecuo.mutation.SetClientUID(u)
	return ecuo
}

// SetLastAccessTime sets the "last_access_time" field.
func (ecuo *ExtensionClientUpdateOne) SetLastAccessTime(t time.Time) *ExtensionClientUpdateOne {
	ecuo.mutation.SetLastAccessTime(t)
	return ecuo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ecuo *ExtensionClientUpdateOne) AddGroupIDs(ids ...int) *ExtensionClientUpdateOne {
	ecuo.mutation.AddGroupIDs(ids...)
	return ecuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (ecuo *ExtensionClientUpdateOne) AddGroups(g ...*Group) *ExtensionClientUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ecuo.AddGroupIDs(ids...)
}

// Mutation returns the ExtensionClientMutation object of the builder.
func (ecuo *ExtensionClientUpdateOne) Mutation() *ExtensionClientMutation {
	return ecuo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ecuo *ExtensionClientUpdateOne) ClearGroups() *ExtensionClientUpdateOne {
	ecuo.mutation.ClearGroups()
	return ecuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ecuo *ExtensionClientUpdateOne) RemoveGroupIDs(ids ...int) *ExtensionClientUpdateOne {
	ecuo.mutation.RemoveGroupIDs(ids...)
	return ecuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (ecuo *ExtensionClientUpdateOne) RemoveGroups(g ...*Group) *ExtensionClientUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ecuo.RemoveGroupIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *ExtensionClientUpdateOne) Select(field string, fields ...string) *ExtensionClientUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated ExtensionClient entity.
func (ecuo *ExtensionClientUpdateOne) Save(ctx context.Context) (*ExtensionClient, error) {
	var (
		err  error
		node *ExtensionClient
	)
	if len(ecuo.hooks) == 0 {
		if err = ecuo.check(); err != nil {
			return nil, err
		}
		node, err = ecuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExtensionClientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecuo.check(); err != nil {
				return nil, err
			}
			ecuo.mutation = mutation
			node, err = ecuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ecuo.hooks) - 1; i >= 0; i-- {
			if ecuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ecuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *ExtensionClientUpdateOne) SaveX(ctx context.Context) *ExtensionClient {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *ExtensionClientUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *ExtensionClientUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *ExtensionClientUpdateOne) check() error {
	if v, ok := ecuo.mutation.Name(); ok {
		if err := extensionclient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExtensionClient.name": %w`, err)}
		}
	}
	if v, ok := ecuo.mutation.ExtensionID(); ok {
		if err := extensionclient.ExtensionIDValidator(v); err != nil {
			return &ValidationError{Name: "extension_id", err: fmt.Errorf(`ent: validator failed for field "ExtensionClient.extension_id": %w`, err)}
		}
	}
	return nil
}

func (ecuo *ExtensionClientUpdateOne) sqlSave(ctx context.Context) (_node *ExtensionClient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   extensionclient.Table,
			Columns: extensionclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: extensionclient.FieldID,
			},
		},
	}
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExtensionClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extensionclient.FieldID)
		for _, f := range fields {
			if !extensionclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != extensionclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: extensionclient.FieldName,
		})
	}
	if value, ok := ecuo.mutation.ExtensionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: extensionclient.FieldExtensionID,
		})
	}
	if value, ok := ecuo.mutation.ClientUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: extensionclient.FieldClientUID,
		})
	}
	if value, ok := ecuo.mutation.LastAccessTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: extensionclient.FieldLastAccessTime,
		})
	}
	if ecuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extensionclient.GroupsTable,
			Columns: []string{extensionclient.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ecuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extensionclient.GroupsTable,
			Columns: []string{extensionclient.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   extensionclient.GroupsTable,
			Columns: []string{extensionclient.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExtensionClient{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{extensionclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
