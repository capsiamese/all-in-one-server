// Code generated by entc, DO NOT EDIT.

package ent

import (
	"aio/ent/extensionclient"
	"aio/ent/group"
	"aio/ent/predicate"
	"aio/ent/tab"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"

	uuid "github.com/satori/go.uuid"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUID sets the "uid" field.
func (gu *GroupUpdate) SetUID(u uuid.UUID) *GroupUpdate {
	gu.mutation.SetUID(u)
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GroupUpdate) SetCreatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetShareURL sets the "share_url" field.
func (gu *GroupUpdate) SetShareURL(s string) *GroupUpdate {
	gu.mutation.SetShareURL(s)
	return gu
}

// SetNillableShareURL sets the "share_url" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableShareURL(s *string) *GroupUpdate {
	if s != nil {
		gu.SetShareURL(*s)
	}
	return gu
}

// ClearShareURL clears the value of the "share_url" field.
func (gu *GroupUpdate) ClearShareURL() *GroupUpdate {
	gu.mutation.ClearShareURL()
	return gu
}

// SetOption sets the "option" field.
func (gu *GroupUpdate) SetOption(s string) *GroupUpdate {
	gu.mutation.SetOption(s)
	return gu
}

// SetNillableOption sets the "option" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableOption(s *string) *GroupUpdate {
	if s != nil {
		gu.SetOption(*s)
	}
	return gu
}

// ClearOption clears the value of the "option" field.
func (gu *GroupUpdate) ClearOption() *GroupUpdate {
	gu.mutation.ClearOption()
	return gu
}

// SetSeq sets the "seq" field.
func (gu *GroupUpdate) SetSeq(i int32) *GroupUpdate {
	gu.mutation.ResetSeq()
	gu.mutation.SetSeq(i)
	return gu
}

// AddSeq adds i to the "seq" field.
func (gu *GroupUpdate) AddSeq(i int32) *GroupUpdate {
	gu.mutation.AddSeq(i)
	return gu
}

// AddTabIDs adds the "tabs" edge to the Tab entity by IDs.
func (gu *GroupUpdate) AddTabIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddTabIDs(ids...)
	return gu
}

// AddTabs adds the "tabs" edges to the Tab entity.
func (gu *GroupUpdate) AddTabs(t ...*Tab) *GroupUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.AddTabIDs(ids...)
}

// SetClientID sets the "client" edge to the ExtensionClient entity by ID.
func (gu *GroupUpdate) SetClientID(id int) *GroupUpdate {
	gu.mutation.SetClientID(id)
	return gu
}

// SetNillableClientID sets the "client" edge to the ExtensionClient entity by ID if the given value is not nil.
func (gu *GroupUpdate) SetNillableClientID(id *int) *GroupUpdate {
	if id != nil {
		gu = gu.SetClientID(*id)
	}
	return gu
}

// SetClient sets the "client" edge to the ExtensionClient entity.
func (gu *GroupUpdate) SetClient(e *ExtensionClient) *GroupUpdate {
	return gu.SetClientID(e.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearTabs clears all "tabs" edges to the Tab entity.
func (gu *GroupUpdate) ClearTabs() *GroupUpdate {
	gu.mutation.ClearTabs()
	return gu
}

// RemoveTabIDs removes the "tabs" edge to Tab entities by IDs.
func (gu *GroupUpdate) RemoveTabIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveTabIDs(ids...)
	return gu
}

// RemoveTabs removes "tabs" edges to Tab entities.
func (gu *GroupUpdate) RemoveTabs(t ...*Tab) *GroupUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return gu.RemoveTabIDs(ids...)
}

// ClearClient clears the "client" edge to the ExtensionClient entity.
func (gu *GroupUpdate) ClearClient() *GroupUpdate {
	gu.mutation.ClearClient()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: group.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: group.FieldUID,
		})
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldName,
		})
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldCreatedAt,
		})
	}
	if value, ok := gu.mutation.ShareURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldShareURL,
		})
	}
	if gu.mutation.ShareURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: group.FieldShareURL,
		})
	}
	if value, ok := gu.mutation.Option(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldOption,
		})
	}
	if gu.mutation.OptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: group.FieldOption,
		})
	}
	if value, ok := gu.mutation.Seq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldSeq,
		})
	}
	if value, ok := gu.mutation.AddedSeq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldSeq,
		})
	}
	if gu.mutation.TabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TabsTable,
			Columns: []string{group.TabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tab.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedTabsIDs(); len(nodes) > 0 && !gu.mutation.TabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TabsTable,
			Columns: []string{group.TabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tab.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.TabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TabsTable,
			Columns: []string{group.TabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tab.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.ClientTable,
			Columns: []string{group.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.ClientTable,
			Columns: []string{group.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetUID sets the "uid" field.
func (guo *GroupUpdateOne) SetUID(u uuid.UUID) *GroupUpdateOne {
	guo.mutation.SetUID(u)
	return guo
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GroupUpdateOne) SetCreatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetShareURL sets the "share_url" field.
func (guo *GroupUpdateOne) SetShareURL(s string) *GroupUpdateOne {
	guo.mutation.SetShareURL(s)
	return guo
}

// SetNillableShareURL sets the "share_url" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableShareURL(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetShareURL(*s)
	}
	return guo
}

// ClearShareURL clears the value of the "share_url" field.
func (guo *GroupUpdateOne) ClearShareURL() *GroupUpdateOne {
	guo.mutation.ClearShareURL()
	return guo
}

// SetOption sets the "option" field.
func (guo *GroupUpdateOne) SetOption(s string) *GroupUpdateOne {
	guo.mutation.SetOption(s)
	return guo
}

// SetNillableOption sets the "option" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableOption(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetOption(*s)
	}
	return guo
}

// ClearOption clears the value of the "option" field.
func (guo *GroupUpdateOne) ClearOption() *GroupUpdateOne {
	guo.mutation.ClearOption()
	return guo
}

// SetSeq sets the "seq" field.
func (guo *GroupUpdateOne) SetSeq(i int32) *GroupUpdateOne {
	guo.mutation.ResetSeq()
	guo.mutation.SetSeq(i)
	return guo
}

// AddSeq adds i to the "seq" field.
func (guo *GroupUpdateOne) AddSeq(i int32) *GroupUpdateOne {
	guo.mutation.AddSeq(i)
	return guo
}

// AddTabIDs adds the "tabs" edge to the Tab entity by IDs.
func (guo *GroupUpdateOne) AddTabIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddTabIDs(ids...)
	return guo
}

// AddTabs adds the "tabs" edges to the Tab entity.
func (guo *GroupUpdateOne) AddTabs(t ...*Tab) *GroupUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.AddTabIDs(ids...)
}

// SetClientID sets the "client" edge to the ExtensionClient entity by ID.
func (guo *GroupUpdateOne) SetClientID(id int) *GroupUpdateOne {
	guo.mutation.SetClientID(id)
	return guo
}

// SetNillableClientID sets the "client" edge to the ExtensionClient entity by ID if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableClientID(id *int) *GroupUpdateOne {
	if id != nil {
		guo = guo.SetClientID(*id)
	}
	return guo
}

// SetClient sets the "client" edge to the ExtensionClient entity.
func (guo *GroupUpdateOne) SetClient(e *ExtensionClient) *GroupUpdateOne {
	return guo.SetClientID(e.ID)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearTabs clears all "tabs" edges to the Tab entity.
func (guo *GroupUpdateOne) ClearTabs() *GroupUpdateOne {
	guo.mutation.ClearTabs()
	return guo
}

// RemoveTabIDs removes the "tabs" edge to Tab entities by IDs.
func (guo *GroupUpdateOne) RemoveTabIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveTabIDs(ids...)
	return guo
}

// RemoveTabs removes "tabs" edges to Tab entities.
func (guo *GroupUpdateOne) RemoveTabs(t ...*Tab) *GroupUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return guo.RemoveTabIDs(ids...)
}

// ClearClient clears the "client" edge to the ExtensionClient entity.
func (guo *GroupUpdateOne) ClearClient() *GroupUpdateOne {
	guo.mutation.ClearClient()
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	var (
		err  error
		node *Group
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: group.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: group.FieldUID,
		})
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldName,
		})
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: group.FieldCreatedAt,
		})
	}
	if value, ok := guo.mutation.ShareURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldShareURL,
		})
	}
	if guo.mutation.ShareURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: group.FieldShareURL,
		})
	}
	if value, ok := guo.mutation.Option(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: group.FieldOption,
		})
	}
	if guo.mutation.OptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: group.FieldOption,
		})
	}
	if value, ok := guo.mutation.Seq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldSeq,
		})
	}
	if value, ok := guo.mutation.AddedSeq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: group.FieldSeq,
		})
	}
	if guo.mutation.TabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TabsTable,
			Columns: []string{group.TabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tab.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedTabsIDs(); len(nodes) > 0 && !guo.mutation.TabsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TabsTable,
			Columns: []string{group.TabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tab.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.TabsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.TabsTable,
			Columns: []string{group.TabsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tab.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.ClientTable,
			Columns: []string{group.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.ClientTable,
			Columns: []string{group.ClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
