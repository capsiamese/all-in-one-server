// Code generated by entc, DO NOT EDIT.

package tab

import (
	"notification/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	uuid "github.com/satori/go.uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Seq applies equality check predicate on the "seq" field. It's identical to SeqEQ.
func Seq(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeq), v))
	})
}

// Favicon applies equality check predicate on the "favicon" field. It's identical to FaviconEQ.
func Favicon(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFavicon), v))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// SeqEQ applies the EQ predicate on the "seq" field.
func SeqEQ(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSeq), v))
	})
}

// SeqNEQ applies the NEQ predicate on the "seq" field.
func SeqNEQ(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSeq), v))
	})
}

// SeqIn applies the In predicate on the "seq" field.
func SeqIn(vs ...int32) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSeq), v...))
	})
}

// SeqNotIn applies the NotIn predicate on the "seq" field.
func SeqNotIn(vs ...int32) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSeq), v...))
	})
}

// SeqGT applies the GT predicate on the "seq" field.
func SeqGT(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSeq), v))
	})
}

// SeqGTE applies the GTE predicate on the "seq" field.
func SeqGTE(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSeq), v))
	})
}

// SeqLT applies the LT predicate on the "seq" field.
func SeqLT(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSeq), v))
	})
}

// SeqLTE applies the LTE predicate on the "seq" field.
func SeqLTE(v int32) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSeq), v))
	})
}

// FaviconEQ applies the EQ predicate on the "favicon" field.
func FaviconEQ(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFavicon), v))
	})
}

// FaviconNEQ applies the NEQ predicate on the "favicon" field.
func FaviconNEQ(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFavicon), v))
	})
}

// FaviconIn applies the In predicate on the "favicon" field.
func FaviconIn(vs ...string) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFavicon), v...))
	})
}

// FaviconNotIn applies the NotIn predicate on the "favicon" field.
func FaviconNotIn(vs ...string) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFavicon), v...))
	})
}

// FaviconGT applies the GT predicate on the "favicon" field.
func FaviconGT(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFavicon), v))
	})
}

// FaviconGTE applies the GTE predicate on the "favicon" field.
func FaviconGTE(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFavicon), v))
	})
}

// FaviconLT applies the LT predicate on the "favicon" field.
func FaviconLT(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFavicon), v))
	})
}

// FaviconLTE applies the LTE predicate on the "favicon" field.
func FaviconLTE(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFavicon), v))
	})
}

// FaviconContains applies the Contains predicate on the "favicon" field.
func FaviconContains(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFavicon), v))
	})
}

// FaviconHasPrefix applies the HasPrefix predicate on the "favicon" field.
func FaviconHasPrefix(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFavicon), v))
	})
}

// FaviconHasSuffix applies the HasSuffix predicate on the "favicon" field.
func FaviconHasSuffix(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFavicon), v))
	})
}

// FaviconIsNil applies the IsNil predicate on the "favicon" field.
func FaviconIsNil() predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFavicon)))
	})
}

// FaviconNotNil applies the NotNil predicate on the "favicon" field.
func FaviconNotNil() predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFavicon)))
	})
}

// FaviconEqualFold applies the EqualFold predicate on the "favicon" field.
func FaviconEqualFold(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFavicon), v))
	})
}

// FaviconContainsFold applies the ContainsFold predicate on the "favicon" field.
func FaviconContainsFold(v string) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFavicon), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uuid.UUID) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uuid.UUID) predicate.Tab {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tab(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v uuid.UUID) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tab) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tab) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tab) predicate.Tab {
	return predicate.Tab(func(s *sql.Selector) {
		p(s.Not())
	})
}
