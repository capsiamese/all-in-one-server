// Code generated by entc, DO NOT EDIT.

package ent

import (
	"aio/ent/barkaddress"
	"aio/ent/extensionclient"
	"aio/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BarkAddressUpdate is the builder for updating BarkAddress entities.
type BarkAddressUpdate struct {
	config
	hooks    []Hook
	mutation *BarkAddressMutation
}

// Where appends a list predicates to the BarkAddressUpdate builder.
func (bau *BarkAddressUpdate) Where(ps ...predicate.BarkAddress) *BarkAddressUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetName sets the "name" field.
func (bau *BarkAddressUpdate) SetName(s string) *BarkAddressUpdate {
	bau.mutation.SetName(s)
	return bau
}

// SetTarget sets the "target" field.
func (bau *BarkAddressUpdate) SetTarget(s string) *BarkAddressUpdate {
	bau.mutation.SetTarget(s)
	return bau
}

// SetIndex sets the "index" field.
func (bau *BarkAddressUpdate) SetIndex(i int64) *BarkAddressUpdate {
	bau.mutation.ResetIndex()
	bau.mutation.SetIndex(i)
	return bau
}

// AddIndex adds i to the "index" field.
func (bau *BarkAddressUpdate) AddIndex(i int64) *BarkAddressUpdate {
	bau.mutation.AddIndex(i)
	return bau
}

// AddClientIDs adds the "client" edge to the ExtensionClient entity by IDs.
func (bau *BarkAddressUpdate) AddClientIDs(ids ...int) *BarkAddressUpdate {
	bau.mutation.AddClientIDs(ids...)
	return bau
}

// AddClient adds the "client" edges to the ExtensionClient entity.
func (bau *BarkAddressUpdate) AddClient(e ...*ExtensionClient) *BarkAddressUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bau.AddClientIDs(ids...)
}

// Mutation returns the BarkAddressMutation object of the builder.
func (bau *BarkAddressUpdate) Mutation() *BarkAddressMutation {
	return bau.mutation
}

// ClearClient clears all "client" edges to the ExtensionClient entity.
func (bau *BarkAddressUpdate) ClearClient() *BarkAddressUpdate {
	bau.mutation.ClearClient()
	return bau
}

// RemoveClientIDs removes the "client" edge to ExtensionClient entities by IDs.
func (bau *BarkAddressUpdate) RemoveClientIDs(ids ...int) *BarkAddressUpdate {
	bau.mutation.RemoveClientIDs(ids...)
	return bau
}

// RemoveClient removes "client" edges to ExtensionClient entities.
func (bau *BarkAddressUpdate) RemoveClient(e ...*ExtensionClient) *BarkAddressUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bau.RemoveClientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BarkAddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bau.hooks) == 0 {
		if err = bau.check(); err != nil {
			return 0, err
		}
		affected, err = bau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BarkAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bau.check(); err != nil {
				return 0, err
			}
			bau.mutation = mutation
			affected, err = bau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bau.hooks) - 1; i >= 0; i-- {
			if bau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BarkAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BarkAddressUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BarkAddressUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bau *BarkAddressUpdate) check() error {
	if v, ok := bau.mutation.Name(); ok {
		if err := barkaddress.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BarkAddress.name": %w`, err)}
		}
	}
	if v, ok := bau.mutation.Target(); ok {
		if err := barkaddress.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`ent: validator failed for field "BarkAddress.target": %w`, err)}
		}
	}
	return nil
}

func (bau *BarkAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   barkaddress.Table,
			Columns: barkaddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: barkaddress.FieldID,
			},
		},
	}
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: barkaddress.FieldName,
		})
	}
	if value, ok := bau.mutation.Target(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: barkaddress.FieldTarget,
		})
	}
	if value, ok := bau.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: barkaddress.FieldIndex,
		})
	}
	if value, ok := bau.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: barkaddress.FieldIndex,
		})
	}
	if bau.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   barkaddress.ClientTable,
			Columns: barkaddress.ClientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedClientIDs(); len(nodes) > 0 && !bau.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   barkaddress.ClientTable,
			Columns: barkaddress.ClientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   barkaddress.ClientTable,
			Columns: barkaddress.ClientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{barkaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BarkAddressUpdateOne is the builder for updating a single BarkAddress entity.
type BarkAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BarkAddressMutation
}

// SetName sets the "name" field.
func (bauo *BarkAddressUpdateOne) SetName(s string) *BarkAddressUpdateOne {
	bauo.mutation.SetName(s)
	return bauo
}

// SetTarget sets the "target" field.
func (bauo *BarkAddressUpdateOne) SetTarget(s string) *BarkAddressUpdateOne {
	bauo.mutation.SetTarget(s)
	return bauo
}

// SetIndex sets the "index" field.
func (bauo *BarkAddressUpdateOne) SetIndex(i int64) *BarkAddressUpdateOne {
	bauo.mutation.ResetIndex()
	bauo.mutation.SetIndex(i)
	return bauo
}

// AddIndex adds i to the "index" field.
func (bauo *BarkAddressUpdateOne) AddIndex(i int64) *BarkAddressUpdateOne {
	bauo.mutation.AddIndex(i)
	return bauo
}

// AddClientIDs adds the "client" edge to the ExtensionClient entity by IDs.
func (bauo *BarkAddressUpdateOne) AddClientIDs(ids ...int) *BarkAddressUpdateOne {
	bauo.mutation.AddClientIDs(ids...)
	return bauo
}

// AddClient adds the "client" edges to the ExtensionClient entity.
func (bauo *BarkAddressUpdateOne) AddClient(e ...*ExtensionClient) *BarkAddressUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bauo.AddClientIDs(ids...)
}

// Mutation returns the BarkAddressMutation object of the builder.
func (bauo *BarkAddressUpdateOne) Mutation() *BarkAddressMutation {
	return bauo.mutation
}

// ClearClient clears all "client" edges to the ExtensionClient entity.
func (bauo *BarkAddressUpdateOne) ClearClient() *BarkAddressUpdateOne {
	bauo.mutation.ClearClient()
	return bauo
}

// RemoveClientIDs removes the "client" edge to ExtensionClient entities by IDs.
func (bauo *BarkAddressUpdateOne) RemoveClientIDs(ids ...int) *BarkAddressUpdateOne {
	bauo.mutation.RemoveClientIDs(ids...)
	return bauo
}

// RemoveClient removes "client" edges to ExtensionClient entities.
func (bauo *BarkAddressUpdateOne) RemoveClient(e ...*ExtensionClient) *BarkAddressUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return bauo.RemoveClientIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BarkAddressUpdateOne) Select(field string, fields ...string) *BarkAddressUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BarkAddress entity.
func (bauo *BarkAddressUpdateOne) Save(ctx context.Context) (*BarkAddress, error) {
	var (
		err  error
		node *BarkAddress
	)
	if len(bauo.hooks) == 0 {
		if err = bauo.check(); err != nil {
			return nil, err
		}
		node, err = bauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BarkAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bauo.check(); err != nil {
				return nil, err
			}
			bauo.mutation = mutation
			node, err = bauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bauo.hooks) - 1; i >= 0; i-- {
			if bauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BarkAddressUpdateOne) SaveX(ctx context.Context) *BarkAddress {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BarkAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BarkAddressUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bauo *BarkAddressUpdateOne) check() error {
	if v, ok := bauo.mutation.Name(); ok {
		if err := barkaddress.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "BarkAddress.name": %w`, err)}
		}
	}
	if v, ok := bauo.mutation.Target(); ok {
		if err := barkaddress.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`ent: validator failed for field "BarkAddress.target": %w`, err)}
		}
	}
	return nil
}

func (bauo *BarkAddressUpdateOne) sqlSave(ctx context.Context) (_node *BarkAddress, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   barkaddress.Table,
			Columns: barkaddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: barkaddress.FieldID,
			},
		},
	}
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BarkAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, barkaddress.FieldID)
		for _, f := range fields {
			if !barkaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != barkaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: barkaddress.FieldName,
		})
	}
	if value, ok := bauo.mutation.Target(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: barkaddress.FieldTarget,
		})
	}
	if value, ok := bauo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: barkaddress.FieldIndex,
		})
	}
	if value, ok := bauo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: barkaddress.FieldIndex,
		})
	}
	if bauo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   barkaddress.ClientTable,
			Columns: barkaddress.ClientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedClientIDs(); len(nodes) > 0 && !bauo.mutation.ClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   barkaddress.ClientTable,
			Columns: barkaddress.ClientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.ClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   barkaddress.ClientTable,
			Columns: barkaddress.ClientPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BarkAddress{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{barkaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
