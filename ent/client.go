// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"notification/ent/migrate"

	"notification/ent/extensionclient"
	"notification/ent/tabhistory"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ExtensionClient is the client for interacting with the ExtensionClient builders.
	ExtensionClient *ExtensionClientClient
	// TabHistory is the client for interacting with the TabHistory builders.
	TabHistory *TabHistoryClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ExtensionClient = NewExtensionClientClient(c.config)
	c.TabHistory = NewTabHistoryClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		ExtensionClient: NewExtensionClientClient(cfg),
		TabHistory:      NewTabHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		ExtensionClient: NewExtensionClientClient(cfg),
		TabHistory:      NewTabHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ExtensionClient.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ExtensionClient.Use(hooks...)
	c.TabHistory.Use(hooks...)
}

// ExtensionClientClient is a client for the ExtensionClient schema.
type ExtensionClientClient struct {
	config
}

// NewExtensionClientClient returns a client for the ExtensionClient from the given config.
func NewExtensionClientClient(c config) *ExtensionClientClient {
	return &ExtensionClientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `extensionclient.Hooks(f(g(h())))`.
func (c *ExtensionClientClient) Use(hooks ...Hook) {
	c.hooks.ExtensionClient = append(c.hooks.ExtensionClient, hooks...)
}

// Create returns a create builder for ExtensionClient.
func (c *ExtensionClientClient) Create() *ExtensionClientCreate {
	mutation := newExtensionClientMutation(c.config, OpCreate)
	return &ExtensionClientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExtensionClient entities.
func (c *ExtensionClientClient) CreateBulk(builders ...*ExtensionClientCreate) *ExtensionClientCreateBulk {
	return &ExtensionClientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExtensionClient.
func (c *ExtensionClientClient) Update() *ExtensionClientUpdate {
	mutation := newExtensionClientMutation(c.config, OpUpdate)
	return &ExtensionClientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExtensionClientClient) UpdateOne(ec *ExtensionClient) *ExtensionClientUpdateOne {
	mutation := newExtensionClientMutation(c.config, OpUpdateOne, withExtensionClient(ec))
	return &ExtensionClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExtensionClientClient) UpdateOneID(id int) *ExtensionClientUpdateOne {
	mutation := newExtensionClientMutation(c.config, OpUpdateOne, withExtensionClientID(id))
	return &ExtensionClientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExtensionClient.
func (c *ExtensionClientClient) Delete() *ExtensionClientDelete {
	mutation := newExtensionClientMutation(c.config, OpDelete)
	return &ExtensionClientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExtensionClientClient) DeleteOne(ec *ExtensionClient) *ExtensionClientDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExtensionClientClient) DeleteOneID(id int) *ExtensionClientDeleteOne {
	builder := c.Delete().Where(extensionclient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExtensionClientDeleteOne{builder}
}

// Query returns a query builder for ExtensionClient.
func (c *ExtensionClientClient) Query() *ExtensionClientQuery {
	return &ExtensionClientQuery{
		config: c.config,
	}
}

// Get returns a ExtensionClient entity by its id.
func (c *ExtensionClientClient) Get(ctx context.Context, id int) (*ExtensionClient, error) {
	return c.Query().Where(extensionclient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExtensionClientClient) GetX(ctx context.Context, id int) *ExtensionClient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHistories queries the histories edge of a ExtensionClient.
func (c *ExtensionClientClient) QueryHistories(ec *ExtensionClient) *TabHistoryQuery {
	query := &TabHistoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(extensionclient.Table, extensionclient.FieldID, id),
			sqlgraph.To(tabhistory.Table, tabhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, extensionclient.HistoriesTable, extensionclient.HistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExtensionClientClient) Hooks() []Hook {
	return c.hooks.ExtensionClient
}

// TabHistoryClient is a client for the TabHistory schema.
type TabHistoryClient struct {
	config
}

// NewTabHistoryClient returns a client for the TabHistory from the given config.
func NewTabHistoryClient(c config) *TabHistoryClient {
	return &TabHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tabhistory.Hooks(f(g(h())))`.
func (c *TabHistoryClient) Use(hooks ...Hook) {
	c.hooks.TabHistory = append(c.hooks.TabHistory, hooks...)
}

// Create returns a create builder for TabHistory.
func (c *TabHistoryClient) Create() *TabHistoryCreate {
	mutation := newTabHistoryMutation(c.config, OpCreate)
	return &TabHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TabHistory entities.
func (c *TabHistoryClient) CreateBulk(builders ...*TabHistoryCreate) *TabHistoryCreateBulk {
	return &TabHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TabHistory.
func (c *TabHistoryClient) Update() *TabHistoryUpdate {
	mutation := newTabHistoryMutation(c.config, OpUpdate)
	return &TabHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TabHistoryClient) UpdateOne(th *TabHistory) *TabHistoryUpdateOne {
	mutation := newTabHistoryMutation(c.config, OpUpdateOne, withTabHistory(th))
	return &TabHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TabHistoryClient) UpdateOneID(id int) *TabHistoryUpdateOne {
	mutation := newTabHistoryMutation(c.config, OpUpdateOne, withTabHistoryID(id))
	return &TabHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TabHistory.
func (c *TabHistoryClient) Delete() *TabHistoryDelete {
	mutation := newTabHistoryMutation(c.config, OpDelete)
	return &TabHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TabHistoryClient) DeleteOne(th *TabHistory) *TabHistoryDeleteOne {
	return c.DeleteOneID(th.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TabHistoryClient) DeleteOneID(id int) *TabHistoryDeleteOne {
	builder := c.Delete().Where(tabhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TabHistoryDeleteOne{builder}
}

// Query returns a query builder for TabHistory.
func (c *TabHistoryClient) Query() *TabHistoryQuery {
	return &TabHistoryQuery{
		config: c.config,
	}
}

// Get returns a TabHistory entity by its id.
func (c *TabHistoryClient) Get(ctx context.Context, id int) (*TabHistory, error) {
	return c.Query().Where(tabhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TabHistoryClient) GetX(ctx context.Context, id int) *TabHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHistoryList queries the history_list edge of a TabHistory.
func (c *TabHistoryClient) QueryHistoryList(th *TabHistory) *ExtensionClientQuery {
	query := &ExtensionClientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := th.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tabhistory.Table, tabhistory.FieldID, id),
			sqlgraph.To(extensionclient.Table, extensionclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tabhistory.HistoryListTable, tabhistory.HistoryListColumn),
		)
		fromV = sqlgraph.Neighbors(th.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TabHistoryClient) Hooks() []Hook {
	return c.hooks.TabHistory
}
