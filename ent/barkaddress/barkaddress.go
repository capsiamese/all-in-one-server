// Code generated by entc, DO NOT EDIT.

package barkaddress

const (
	// Label holds the string label denoting the barkaddress type in the database.
	Label = "bark_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTarget holds the string denoting the target field in the database.
	FieldTarget = "target"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// EdgeClient holds the string denoting the client edge name in mutations.
	EdgeClient = "client"
	// Table holds the table name of the barkaddress in the database.
	Table = "bark_addresses"
	// ClientTable is the table that holds the client relation/edge. The primary key declared below.
	ClientTable = "extension_client_addresses"
	// ClientInverseTable is the table name for the ExtensionClient entity.
	// It exists in this package in order to avoid circular dependency with the "extensionclient" package.
	ClientInverseTable = "extension_clients"
)

// Columns holds all SQL columns for barkaddress fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTarget,
	FieldIndex,
}

var (
	// ClientPrimaryKey and ClientColumn2 are the table columns denoting the
	// primary key for the client relation (M2M).
	ClientPrimaryKey = []string{"extension_client_id", "bark_address_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TargetValidator is a validator for the "target" field. It is called by the builders before save.
	TargetValidator func(string) error
)
