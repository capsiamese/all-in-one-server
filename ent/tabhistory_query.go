// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"
	"notification/ent/extensionclient"
	"notification/ent/predicate"
	"notification/ent/tabhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TabHistoryQuery is the builder for querying TabHistory entities.
type TabHistoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.TabHistory
	// eager-loading edges.
	withHistoryList *ExtensionClientQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TabHistoryQuery builder.
func (thq *TabHistoryQuery) Where(ps ...predicate.TabHistory) *TabHistoryQuery {
	thq.predicates = append(thq.predicates, ps...)
	return thq
}

// Limit adds a limit step to the query.
func (thq *TabHistoryQuery) Limit(limit int) *TabHistoryQuery {
	thq.limit = &limit
	return thq
}

// Offset adds an offset step to the query.
func (thq *TabHistoryQuery) Offset(offset int) *TabHistoryQuery {
	thq.offset = &offset
	return thq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (thq *TabHistoryQuery) Unique(unique bool) *TabHistoryQuery {
	thq.unique = &unique
	return thq
}

// Order adds an order step to the query.
func (thq *TabHistoryQuery) Order(o ...OrderFunc) *TabHistoryQuery {
	thq.order = append(thq.order, o...)
	return thq
}

// QueryHistoryList chains the current query on the "history_list" edge.
func (thq *TabHistoryQuery) QueryHistoryList() *ExtensionClientQuery {
	query := &ExtensionClientQuery{config: thq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := thq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := thq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tabhistory.Table, tabhistory.FieldID, selector),
			sqlgraph.To(extensionclient.Table, extensionclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tabhistory.HistoryListTable, tabhistory.HistoryListColumn),
		)
		fromU = sqlgraph.SetNeighbors(thq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TabHistory entity from the query.
// Returns a *NotFoundError when no TabHistory was found.
func (thq *TabHistoryQuery) First(ctx context.Context) (*TabHistory, error) {
	nodes, err := thq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tabhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (thq *TabHistoryQuery) FirstX(ctx context.Context) *TabHistory {
	node, err := thq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TabHistory ID from the query.
// Returns a *NotFoundError when no TabHistory ID was found.
func (thq *TabHistoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = thq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tabhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (thq *TabHistoryQuery) FirstIDX(ctx context.Context) int {
	id, err := thq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TabHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TabHistory entity is found.
// Returns a *NotFoundError when no TabHistory entities are found.
func (thq *TabHistoryQuery) Only(ctx context.Context) (*TabHistory, error) {
	nodes, err := thq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tabhistory.Label}
	default:
		return nil, &NotSingularError{tabhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (thq *TabHistoryQuery) OnlyX(ctx context.Context) *TabHistory {
	node, err := thq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TabHistory ID in the query.
// Returns a *NotSingularError when more than one TabHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (thq *TabHistoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = thq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = &NotSingularError{tabhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (thq *TabHistoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := thq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TabHistories.
func (thq *TabHistoryQuery) All(ctx context.Context) ([]*TabHistory, error) {
	if err := thq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return thq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (thq *TabHistoryQuery) AllX(ctx context.Context) []*TabHistory {
	nodes, err := thq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TabHistory IDs.
func (thq *TabHistoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := thq.Select(tabhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (thq *TabHistoryQuery) IDsX(ctx context.Context) []int {
	ids, err := thq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (thq *TabHistoryQuery) Count(ctx context.Context) (int, error) {
	if err := thq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return thq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (thq *TabHistoryQuery) CountX(ctx context.Context) int {
	count, err := thq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (thq *TabHistoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := thq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return thq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (thq *TabHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := thq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TabHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (thq *TabHistoryQuery) Clone() *TabHistoryQuery {
	if thq == nil {
		return nil
	}
	return &TabHistoryQuery{
		config:          thq.config,
		limit:           thq.limit,
		offset:          thq.offset,
		order:           append([]OrderFunc{}, thq.order...),
		predicates:      append([]predicate.TabHistory{}, thq.predicates...),
		withHistoryList: thq.withHistoryList.Clone(),
		// clone intermediate query.
		sql:    thq.sql.Clone(),
		path:   thq.path,
		unique: thq.unique,
	}
}

// WithHistoryList tells the query-builder to eager-load the nodes that are connected to
// the "history_list" edge. The optional arguments are used to configure the query builder of the edge.
func (thq *TabHistoryQuery) WithHistoryList(opts ...func(*ExtensionClientQuery)) *TabHistoryQuery {
	query := &ExtensionClientQuery{config: thq.config}
	for _, opt := range opts {
		opt(query)
	}
	thq.withHistoryList = query
	return thq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		URL string `json:"url,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TabHistory.Query().
//		GroupBy(tabhistory.FieldURL).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (thq *TabHistoryQuery) GroupBy(field string, fields ...string) *TabHistoryGroupBy {
	group := &TabHistoryGroupBy{config: thq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := thq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return thq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		URL string `json:"url,omitempty"`
//	}
//
//	client.TabHistory.Query().
//		Select(tabhistory.FieldURL).
//		Scan(ctx, &v)
//
func (thq *TabHistoryQuery) Select(fields ...string) *TabHistorySelect {
	thq.fields = append(thq.fields, fields...)
	return &TabHistorySelect{TabHistoryQuery: thq}
}

func (thq *TabHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range thq.fields {
		if !tabhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if thq.path != nil {
		prev, err := thq.path(ctx)
		if err != nil {
			return err
		}
		thq.sql = prev
	}
	return nil
}

func (thq *TabHistoryQuery) sqlAll(ctx context.Context) ([]*TabHistory, error) {
	var (
		nodes       = []*TabHistory{}
		withFKs     = thq.withFKs
		_spec       = thq.querySpec()
		loadedTypes = [1]bool{
			thq.withHistoryList != nil,
		}
	)
	if thq.withHistoryList != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tabhistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TabHistory{config: thq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, thq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := thq.withHistoryList; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TabHistory)
		for i := range nodes {
			if nodes[i].extension_client_histories == nil {
				continue
			}
			fk := *nodes[i].extension_client_histories
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(extensionclient.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "extension_client_histories" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.HistoryList = n
			}
		}
	}

	return nodes, nil
}

func (thq *TabHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := thq.querySpec()
	_spec.Node.Columns = thq.fields
	if len(thq.fields) > 0 {
		_spec.Unique = thq.unique != nil && *thq.unique
	}
	return sqlgraph.CountNodes(ctx, thq.driver, _spec)
}

func (thq *TabHistoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := thq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (thq *TabHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tabhistory.Table,
			Columns: tabhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tabhistory.FieldID,
			},
		},
		From:   thq.sql,
		Unique: true,
	}
	if unique := thq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := thq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tabhistory.FieldID)
		for i := range fields {
			if fields[i] != tabhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := thq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := thq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := thq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := thq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (thq *TabHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(thq.driver.Dialect())
	t1 := builder.Table(tabhistory.Table)
	columns := thq.fields
	if len(columns) == 0 {
		columns = tabhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if thq.sql != nil {
		selector = thq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if thq.unique != nil && *thq.unique {
		selector.Distinct()
	}
	for _, p := range thq.predicates {
		p(selector)
	}
	for _, p := range thq.order {
		p(selector)
	}
	if offset := thq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := thq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TabHistoryGroupBy is the group-by builder for TabHistory entities.
type TabHistoryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (thgb *TabHistoryGroupBy) Aggregate(fns ...AggregateFunc) *TabHistoryGroupBy {
	thgb.fns = append(thgb.fns, fns...)
	return thgb
}

// Scan applies the group-by query and scans the result into the given value.
func (thgb *TabHistoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := thgb.path(ctx)
	if err != nil {
		return err
	}
	thgb.sql = query
	return thgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := thgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(thgb.fields) > 1 {
		return nil, errors.New("ent: TabHistoryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := thgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) StringsX(ctx context.Context) []string {
	v, err := thgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = thgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistoryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) StringX(ctx context.Context) string {
	v, err := thgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(thgb.fields) > 1 {
		return nil, errors.New("ent: TabHistoryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := thgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) IntsX(ctx context.Context) []int {
	v, err := thgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = thgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistoryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) IntX(ctx context.Context) int {
	v, err := thgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(thgb.fields) > 1 {
		return nil, errors.New("ent: TabHistoryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := thgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := thgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = thgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistoryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := thgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(thgb.fields) > 1 {
		return nil, errors.New("ent: TabHistoryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := thgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := thgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (thgb *TabHistoryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = thgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistoryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (thgb *TabHistoryGroupBy) BoolX(ctx context.Context) bool {
	v, err := thgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (thgb *TabHistoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range thgb.fields {
		if !tabhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := thgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := thgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (thgb *TabHistoryGroupBy) sqlQuery() *sql.Selector {
	selector := thgb.sql.Select()
	aggregation := make([]string, 0, len(thgb.fns))
	for _, fn := range thgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(thgb.fields)+len(thgb.fns))
		for _, f := range thgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(thgb.fields...)...)
}

// TabHistorySelect is the builder for selecting fields of TabHistory entities.
type TabHistorySelect struct {
	*TabHistoryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ths *TabHistorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := ths.prepareQuery(ctx); err != nil {
		return err
	}
	ths.sql = ths.TabHistoryQuery.sqlQuery(ctx)
	return ths.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ths *TabHistorySelect) ScanX(ctx context.Context, v interface{}) {
	if err := ths.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Strings(ctx context.Context) ([]string, error) {
	if len(ths.fields) > 1 {
		return nil, errors.New("ent: TabHistorySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ths.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ths *TabHistorySelect) StringsX(ctx context.Context) []string {
	v, err := ths.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ths.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistorySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ths *TabHistorySelect) StringX(ctx context.Context) string {
	v, err := ths.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Ints(ctx context.Context) ([]int, error) {
	if len(ths.fields) > 1 {
		return nil, errors.New("ent: TabHistorySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ths.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ths *TabHistorySelect) IntsX(ctx context.Context) []int {
	v, err := ths.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ths.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistorySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ths *TabHistorySelect) IntX(ctx context.Context) int {
	v, err := ths.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ths.fields) > 1 {
		return nil, errors.New("ent: TabHistorySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ths.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ths *TabHistorySelect) Float64sX(ctx context.Context) []float64 {
	v, err := ths.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ths.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistorySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ths *TabHistorySelect) Float64X(ctx context.Context) float64 {
	v, err := ths.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ths.fields) > 1 {
		return nil, errors.New("ent: TabHistorySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ths.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ths *TabHistorySelect) BoolsX(ctx context.Context) []bool {
	v, err := ths.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ths *TabHistorySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ths.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{tabhistory.Label}
	default:
		err = fmt.Errorf("ent: TabHistorySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ths *TabHistorySelect) BoolX(ctx context.Context) bool {
	v, err := ths.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ths *TabHistorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ths.sql.Query()
	if err := ths.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
