// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"notification/ent/group"
	"notification/ent/tab"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Tab is the model entity for the Tab schema.
type Tab struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Seq holds the value of the "seq" field.
	// sequence
	Seq int32 `json:"seq,omitempty"`
	// Favicon holds the value of the "favicon" field.
	Favicon string `json:"favicon,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TabQuery when eager-loading is set.
	Edges      TabEdges `json:"edges" swaggerignore:"true"`
	group_tabs *int
}

// TabEdges holds the relations/edges for other nodes in the graph.
type TabEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TabEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// The edge group was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tab) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tab.FieldID, tab.FieldSeq:
			values[i] = new(sql.NullInt64)
		case tab.FieldName, tab.FieldURL, tab.FieldFavicon:
			values[i] = new(sql.NullString)
		case tab.ForeignKeys[0]: // group_tabs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tab", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tab fields.
func (t *Tab) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tab.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tab.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case tab.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				t.URL = value.String
			}
		case tab.FieldSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				t.Seq = int32(value.Int64)
			}
		case tab.FieldFavicon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favicon", values[i])
			} else if value.Valid {
				t.Favicon = value.String
			}
		case tab.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_tabs", value)
			} else if value.Valid {
				t.group_tabs = new(int)
				*t.group_tabs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGroup queries the "group" edge of the Tab entity.
func (t *Tab) QueryGroup() *GroupQuery {
	return (&TabClient{config: t.config}).QueryGroup(t)
}

// Update returns a builder for updating this Tab.
// Note that you need to call Tab.Unwrap() before calling this method if this Tab
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tab) Update() *TabUpdateOne {
	return (&TabClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tab entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tab) Unwrap() *Tab {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tab is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tab) String() string {
	var builder strings.Builder
	builder.WriteString("Tab(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", url=")
	builder.WriteString(t.URL)
	builder.WriteString(", seq=")
	builder.WriteString(fmt.Sprintf("%v", t.Seq))
	builder.WriteString(", favicon=")
	builder.WriteString(t.Favicon)
	builder.WriteByte(')')
	return builder.String()
}

// Tabs is a parsable slice of Tab.
type Tabs []*Tab

func (t Tabs) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
