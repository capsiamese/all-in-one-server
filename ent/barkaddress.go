// Code generated by entc, DO NOT EDIT.

package ent

import (
	"aio/ent/barkaddress"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// BarkAddress is the model entity for the BarkAddress schema.
type BarkAddress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Target holds the value of the "target" field.
	Target string `json:"target,omitempty"`
	// Index holds the value of the "index" field.
	Index int64 `json:"index,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BarkAddressQuery when eager-loading is set.
	Edges BarkAddressEdges `json:"edges"`
}

// BarkAddressEdges holds the relations/edges for other nodes in the graph.
type BarkAddressEdges struct {
	// Client holds the value of the client edge.
	Client []*ExtensionClient `json:"client,omitempty" swaggerignore:"true"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClientOrErr returns the Client value or an error if the edge
// was not loaded in eager-loading.
func (e BarkAddressEdges) ClientOrErr() ([]*ExtensionClient, error) {
	if e.loadedTypes[0] {
		return e.Client, nil
	}
	return nil, &NotLoadedError{edge: "client"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BarkAddress) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case barkaddress.FieldID, barkaddress.FieldIndex:
			values[i] = new(sql.NullInt64)
		case barkaddress.FieldName, barkaddress.FieldTarget:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BarkAddress", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BarkAddress fields.
func (ba *BarkAddress) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case barkaddress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case barkaddress.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ba.Name = value.String
			}
		case barkaddress.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				ba.Target = value.String
			}
		case barkaddress.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				ba.Index = value.Int64
			}
		}
	}
	return nil
}

// QueryClient queries the "client" edge of the BarkAddress entity.
func (ba *BarkAddress) QueryClient() *ExtensionClientQuery {
	return (&BarkAddressClient{config: ba.config}).QueryClient(ba)
}

// Update returns a builder for updating this BarkAddress.
// Note that you need to call BarkAddress.Unwrap() before calling this method if this BarkAddress
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BarkAddress) Update() *BarkAddressUpdateOne {
	return (&BarkAddressClient{config: ba.config}).UpdateOne(ba)
}

// Unwrap unwraps the BarkAddress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BarkAddress) Unwrap() *BarkAddress {
	tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BarkAddress is not a transactional entity")
	}
	ba.config.driver = tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BarkAddress) String() string {
	var builder strings.Builder
	builder.WriteString("BarkAddress(")
	builder.WriteString(fmt.Sprintf("id=%v", ba.ID))
	builder.WriteString(", name=")
	builder.WriteString(ba.Name)
	builder.WriteString(", target=")
	builder.WriteString(ba.Target)
	builder.WriteString(", index=")
	builder.WriteString(fmt.Sprintf("%v", ba.Index))
	builder.WriteByte(')')
	return builder.String()
}

// BarkAddresses is a parsable slice of BarkAddress.
type BarkAddresses []*BarkAddress

func (ba BarkAddresses) config(cfg config) {
	for _i := range ba {
		ba[_i].config = cfg
	}
}
