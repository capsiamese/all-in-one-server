// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"notification/ent/extensionclient"
	"notification/ent/group"
	"notification/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExtensionClientQuery is the builder for querying ExtensionClient entities.
type ExtensionClientQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ExtensionClient
	// eager-loading edges.
	withGroups *GroupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExtensionClientQuery builder.
func (ecq *ExtensionClientQuery) Where(ps ...predicate.ExtensionClient) *ExtensionClientQuery {
	ecq.predicates = append(ecq.predicates, ps...)
	return ecq
}

// Limit adds a limit step to the query.
func (ecq *ExtensionClientQuery) Limit(limit int) *ExtensionClientQuery {
	ecq.limit = &limit
	return ecq
}

// Offset adds an offset step to the query.
func (ecq *ExtensionClientQuery) Offset(offset int) *ExtensionClientQuery {
	ecq.offset = &offset
	return ecq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ecq *ExtensionClientQuery) Unique(unique bool) *ExtensionClientQuery {
	ecq.unique = &unique
	return ecq
}

// Order adds an order step to the query.
func (ecq *ExtensionClientQuery) Order(o ...OrderFunc) *ExtensionClientQuery {
	ecq.order = append(ecq.order, o...)
	return ecq
}

// QueryGroups chains the current query on the "groups" edge.
func (ecq *ExtensionClientQuery) QueryGroups() *GroupQuery {
	query := &GroupQuery{config: ecq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ecq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(extensionclient.Table, extensionclient.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, extensionclient.GroupsTable, extensionclient.GroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ecq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ExtensionClient entity from the query.
// Returns a *NotFoundError when no ExtensionClient was found.
func (ecq *ExtensionClientQuery) First(ctx context.Context) (*ExtensionClient, error) {
	nodes, err := ecq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{extensionclient.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ecq *ExtensionClientQuery) FirstX(ctx context.Context) *ExtensionClient {
	node, err := ecq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ExtensionClient ID from the query.
// Returns a *NotFoundError when no ExtensionClient ID was found.
func (ecq *ExtensionClientQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ecq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{extensionclient.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ecq *ExtensionClientQuery) FirstIDX(ctx context.Context) int {
	id, err := ecq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ExtensionClient entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ExtensionClient entity is found.
// Returns a *NotFoundError when no ExtensionClient entities are found.
func (ecq *ExtensionClientQuery) Only(ctx context.Context) (*ExtensionClient, error) {
	nodes, err := ecq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{extensionclient.Label}
	default:
		return nil, &NotSingularError{extensionclient.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ecq *ExtensionClientQuery) OnlyX(ctx context.Context) *ExtensionClient {
	node, err := ecq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ExtensionClient ID in the query.
// Returns a *NotSingularError when more than one ExtensionClient ID is found.
// Returns a *NotFoundError when no entities are found.
func (ecq *ExtensionClientQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ecq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{extensionclient.Label}
	default:
		err = &NotSingularError{extensionclient.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ecq *ExtensionClientQuery) OnlyIDX(ctx context.Context) int {
	id, err := ecq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ExtensionClients.
func (ecq *ExtensionClientQuery) All(ctx context.Context) ([]*ExtensionClient, error) {
	if err := ecq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ecq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ecq *ExtensionClientQuery) AllX(ctx context.Context) []*ExtensionClient {
	nodes, err := ecq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ExtensionClient IDs.
func (ecq *ExtensionClientQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ecq.Select(extensionclient.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ecq *ExtensionClientQuery) IDsX(ctx context.Context) []int {
	ids, err := ecq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ecq *ExtensionClientQuery) Count(ctx context.Context) (int, error) {
	if err := ecq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ecq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ecq *ExtensionClientQuery) CountX(ctx context.Context) int {
	count, err := ecq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ecq *ExtensionClientQuery) Exist(ctx context.Context) (bool, error) {
	if err := ecq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ecq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ecq *ExtensionClientQuery) ExistX(ctx context.Context) bool {
	exist, err := ecq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExtensionClientQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ecq *ExtensionClientQuery) Clone() *ExtensionClientQuery {
	if ecq == nil {
		return nil
	}
	return &ExtensionClientQuery{
		config:     ecq.config,
		limit:      ecq.limit,
		offset:     ecq.offset,
		order:      append([]OrderFunc{}, ecq.order...),
		predicates: append([]predicate.ExtensionClient{}, ecq.predicates...),
		withGroups: ecq.withGroups.Clone(),
		// clone intermediate query.
		sql:    ecq.sql.Clone(),
		path:   ecq.path,
		unique: ecq.unique,
	}
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (ecq *ExtensionClientQuery) WithGroups(opts ...func(*GroupQuery)) *ExtensionClientQuery {
	query := &GroupQuery{config: ecq.config}
	for _, opt := range opts {
		opt(query)
	}
	ecq.withGroups = query
	return ecq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ExtensionClient.Query().
//		GroupBy(extensionclient.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ecq *ExtensionClientQuery) GroupBy(field string, fields ...string) *ExtensionClientGroupBy {
	grbuild := &ExtensionClientGroupBy{config: ecq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ecq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ecq.sqlQuery(ctx), nil
	}
	grbuild.label = extensionclient.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ExtensionClient.Query().
//		Select(extensionclient.FieldName).
//		Scan(ctx, &v)
//
func (ecq *ExtensionClientQuery) Select(fields ...string) *ExtensionClientSelect {
	ecq.fields = append(ecq.fields, fields...)
	selbuild := &ExtensionClientSelect{ExtensionClientQuery: ecq}
	selbuild.label = extensionclient.Label
	selbuild.flds, selbuild.scan = &ecq.fields, selbuild.Scan
	return selbuild
}

func (ecq *ExtensionClientQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ecq.fields {
		if !extensionclient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ecq.path != nil {
		prev, err := ecq.path(ctx)
		if err != nil {
			return err
		}
		ecq.sql = prev
	}
	return nil
}

func (ecq *ExtensionClientQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ExtensionClient, error) {
	var (
		nodes       = []*ExtensionClient{}
		_spec       = ecq.querySpec()
		loadedTypes = [1]bool{
			ecq.withGroups != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ExtensionClient).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ExtensionClient{config: ecq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ecq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ecq.withGroups; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ExtensionClient)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Groups = []*Group{}
		}
		query.withFKs = true
		query.Where(predicate.Group(func(s *sql.Selector) {
			s.Where(sql.InValues(extensionclient.GroupsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.extension_client_groups
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "extension_client_groups" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "extension_client_groups" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Groups = append(node.Edges.Groups, n)
		}
	}

	return nodes, nil
}

func (ecq *ExtensionClientQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ecq.querySpec()
	_spec.Node.Columns = ecq.fields
	if len(ecq.fields) > 0 {
		_spec.Unique = ecq.unique != nil && *ecq.unique
	}
	return sqlgraph.CountNodes(ctx, ecq.driver, _spec)
}

func (ecq *ExtensionClientQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ecq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ecq *ExtensionClientQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   extensionclient.Table,
			Columns: extensionclient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: extensionclient.FieldID,
			},
		},
		From:   ecq.sql,
		Unique: true,
	}
	if unique := ecq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ecq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, extensionclient.FieldID)
		for i := range fields {
			if fields[i] != extensionclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ecq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ecq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ecq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ecq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ecq *ExtensionClientQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ecq.driver.Dialect())
	t1 := builder.Table(extensionclient.Table)
	columns := ecq.fields
	if len(columns) == 0 {
		columns = extensionclient.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ecq.sql != nil {
		selector = ecq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ecq.unique != nil && *ecq.unique {
		selector.Distinct()
	}
	for _, p := range ecq.predicates {
		p(selector)
	}
	for _, p := range ecq.order {
		p(selector)
	}
	if offset := ecq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ecq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ExtensionClientGroupBy is the group-by builder for ExtensionClient entities.
type ExtensionClientGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ecgb *ExtensionClientGroupBy) Aggregate(fns ...AggregateFunc) *ExtensionClientGroupBy {
	ecgb.fns = append(ecgb.fns, fns...)
	return ecgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ecgb *ExtensionClientGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ecgb.path(ctx)
	if err != nil {
		return err
	}
	ecgb.sql = query
	return ecgb.sqlScan(ctx, v)
}

func (ecgb *ExtensionClientGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ecgb.fields {
		if !extensionclient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ecgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ecgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ecgb *ExtensionClientGroupBy) sqlQuery() *sql.Selector {
	selector := ecgb.sql.Select()
	aggregation := make([]string, 0, len(ecgb.fns))
	for _, fn := range ecgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ecgb.fields)+len(ecgb.fns))
		for _, f := range ecgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ecgb.fields...)...)
}

// ExtensionClientSelect is the builder for selecting fields of ExtensionClient entities.
type ExtensionClientSelect struct {
	*ExtensionClientQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ecs *ExtensionClientSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ecs.prepareQuery(ctx); err != nil {
		return err
	}
	ecs.sql = ecs.ExtensionClientQuery.sqlQuery(ctx)
	return ecs.sqlScan(ctx, v)
}

func (ecs *ExtensionClientSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ecs.sql.Query()
	if err := ecs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
