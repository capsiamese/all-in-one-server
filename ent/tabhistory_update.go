// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notification/ent/extensionclient"
	"notification/ent/predicate"
	"notification/ent/tabhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TabHistoryUpdate is the builder for updating TabHistory entities.
type TabHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *TabHistoryMutation
}

// Where appends a list predicates to the TabHistoryUpdate builder.
func (thu *TabHistoryUpdate) Where(ps ...predicate.TabHistory) *TabHistoryUpdate {
	thu.mutation.Where(ps...)
	return thu
}

// SetURL sets the "url" field.
func (thu *TabHistoryUpdate) SetURL(s string) *TabHistoryUpdate {
	thu.mutation.SetURL(s)
	return thu
}

// SetName sets the "name" field.
func (thu *TabHistoryUpdate) SetName(s string) *TabHistoryUpdate {
	thu.mutation.SetName(s)
	return thu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (thu *TabHistoryUpdate) SetNillableName(s *string) *TabHistoryUpdate {
	if s != nil {
		thu.SetName(*s)
	}
	return thu
}

// ClearName clears the value of the "name" field.
func (thu *TabHistoryUpdate) ClearName() *TabHistoryUpdate {
	thu.mutation.ClearName()
	return thu
}

// SetIcon sets the "icon" field.
func (thu *TabHistoryUpdate) SetIcon(s string) *TabHistoryUpdate {
	thu.mutation.SetIcon(s)
	return thu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (thu *TabHistoryUpdate) SetNillableIcon(s *string) *TabHistoryUpdate {
	if s != nil {
		thu.SetIcon(*s)
	}
	return thu
}

// ClearIcon clears the value of the "icon" field.
func (thu *TabHistoryUpdate) ClearIcon() *TabHistoryUpdate {
	thu.mutation.ClearIcon()
	return thu
}

// SetHistoryListID sets the "history_list" edge to the ExtensionClient entity by ID.
func (thu *TabHistoryUpdate) SetHistoryListID(id int) *TabHistoryUpdate {
	thu.mutation.SetHistoryListID(id)
	return thu
}

// SetNillableHistoryListID sets the "history_list" edge to the ExtensionClient entity by ID if the given value is not nil.
func (thu *TabHistoryUpdate) SetNillableHistoryListID(id *int) *TabHistoryUpdate {
	if id != nil {
		thu = thu.SetHistoryListID(*id)
	}
	return thu
}

// SetHistoryList sets the "history_list" edge to the ExtensionClient entity.
func (thu *TabHistoryUpdate) SetHistoryList(e *ExtensionClient) *TabHistoryUpdate {
	return thu.SetHistoryListID(e.ID)
}

// Mutation returns the TabHistoryMutation object of the builder.
func (thu *TabHistoryUpdate) Mutation() *TabHistoryMutation {
	return thu.mutation
}

// ClearHistoryList clears the "history_list" edge to the ExtensionClient entity.
func (thu *TabHistoryUpdate) ClearHistoryList() *TabHistoryUpdate {
	thu.mutation.ClearHistoryList()
	return thu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thu *TabHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(thu.hooks) == 0 {
		affected, err = thu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TabHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			thu.mutation = mutation
			affected, err = thu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(thu.hooks) - 1; i >= 0; i-- {
			if thu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = thu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, thu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (thu *TabHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := thu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thu *TabHistoryUpdate) Exec(ctx context.Context) error {
	_, err := thu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thu *TabHistoryUpdate) ExecX(ctx context.Context) {
	if err := thu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thu *TabHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tabhistory.Table,
			Columns: tabhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tabhistory.FieldID,
			},
		},
	}
	if ps := thu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tabhistory.FieldURL,
		})
	}
	if value, ok := thu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tabhistory.FieldName,
		})
	}
	if thu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tabhistory.FieldName,
		})
	}
	if value, ok := thu.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tabhistory.FieldIcon,
		})
	}
	if thu.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tabhistory.FieldIcon,
		})
	}
	if thu.mutation.HistoryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabhistory.HistoryListTable,
			Columns: []string{tabhistory.HistoryListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thu.mutation.HistoryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabhistory.HistoryListTable,
			Columns: []string{tabhistory.HistoryListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, thu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tabhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TabHistoryUpdateOne is the builder for updating a single TabHistory entity.
type TabHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TabHistoryMutation
}

// SetURL sets the "url" field.
func (thuo *TabHistoryUpdateOne) SetURL(s string) *TabHistoryUpdateOne {
	thuo.mutation.SetURL(s)
	return thuo
}

// SetName sets the "name" field.
func (thuo *TabHistoryUpdateOne) SetName(s string) *TabHistoryUpdateOne {
	thuo.mutation.SetName(s)
	return thuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (thuo *TabHistoryUpdateOne) SetNillableName(s *string) *TabHistoryUpdateOne {
	if s != nil {
		thuo.SetName(*s)
	}
	return thuo
}

// ClearName clears the value of the "name" field.
func (thuo *TabHistoryUpdateOne) ClearName() *TabHistoryUpdateOne {
	thuo.mutation.ClearName()
	return thuo
}

// SetIcon sets the "icon" field.
func (thuo *TabHistoryUpdateOne) SetIcon(s string) *TabHistoryUpdateOne {
	thuo.mutation.SetIcon(s)
	return thuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (thuo *TabHistoryUpdateOne) SetNillableIcon(s *string) *TabHistoryUpdateOne {
	if s != nil {
		thuo.SetIcon(*s)
	}
	return thuo
}

// ClearIcon clears the value of the "icon" field.
func (thuo *TabHistoryUpdateOne) ClearIcon() *TabHistoryUpdateOne {
	thuo.mutation.ClearIcon()
	return thuo
}

// SetHistoryListID sets the "history_list" edge to the ExtensionClient entity by ID.
func (thuo *TabHistoryUpdateOne) SetHistoryListID(id int) *TabHistoryUpdateOne {
	thuo.mutation.SetHistoryListID(id)
	return thuo
}

// SetNillableHistoryListID sets the "history_list" edge to the ExtensionClient entity by ID if the given value is not nil.
func (thuo *TabHistoryUpdateOne) SetNillableHistoryListID(id *int) *TabHistoryUpdateOne {
	if id != nil {
		thuo = thuo.SetHistoryListID(*id)
	}
	return thuo
}

// SetHistoryList sets the "history_list" edge to the ExtensionClient entity.
func (thuo *TabHistoryUpdateOne) SetHistoryList(e *ExtensionClient) *TabHistoryUpdateOne {
	return thuo.SetHistoryListID(e.ID)
}

// Mutation returns the TabHistoryMutation object of the builder.
func (thuo *TabHistoryUpdateOne) Mutation() *TabHistoryMutation {
	return thuo.mutation
}

// ClearHistoryList clears the "history_list" edge to the ExtensionClient entity.
func (thuo *TabHistoryUpdateOne) ClearHistoryList() *TabHistoryUpdateOne {
	thuo.mutation.ClearHistoryList()
	return thuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thuo *TabHistoryUpdateOne) Select(field string, fields ...string) *TabHistoryUpdateOne {
	thuo.fields = append([]string{field}, fields...)
	return thuo
}

// Save executes the query and returns the updated TabHistory entity.
func (thuo *TabHistoryUpdateOne) Save(ctx context.Context) (*TabHistory, error) {
	var (
		err  error
		node *TabHistory
	)
	if len(thuo.hooks) == 0 {
		node, err = thuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TabHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			thuo.mutation = mutation
			node, err = thuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(thuo.hooks) - 1; i >= 0; i-- {
			if thuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = thuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, thuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (thuo *TabHistoryUpdateOne) SaveX(ctx context.Context) *TabHistory {
	node, err := thuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thuo *TabHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := thuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thuo *TabHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := thuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (thuo *TabHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TabHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tabhistory.Table,
			Columns: tabhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tabhistory.FieldID,
			},
		},
	}
	id, ok := thuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TabHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tabhistory.FieldID)
		for _, f := range fields {
			if !tabhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tabhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := thuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tabhistory.FieldURL,
		})
	}
	if value, ok := thuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tabhistory.FieldName,
		})
	}
	if thuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tabhistory.FieldName,
		})
	}
	if value, ok := thuo.mutation.Icon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tabhistory.FieldIcon,
		})
	}
	if thuo.mutation.IconCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: tabhistory.FieldIcon,
		})
	}
	if thuo.mutation.HistoryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabhistory.HistoryListTable,
			Columns: []string{tabhistory.HistoryListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := thuo.mutation.HistoryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tabhistory.HistoryListTable,
			Columns: []string{tabhistory.HistoryListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: extensionclient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TabHistory{config: thuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tabhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
